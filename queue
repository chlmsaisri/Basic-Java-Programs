public class Queue {
    private int maxSize; // maximum size of the queue
    private int front; // index of the front element
    private int rear; // index of the rear element
    private int[] queueArray; // array to store queue elements

    // Constructor to initialize the queue
    public Queue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = -1; // queue is initially empty
        rear = -1;
    }

    // Add an element to the rear of the queue
    public void enqueue(int value) {
        if (rear == maxSize - 1) {
            System.out.println("Queue overflow");
            return;
        }
        if (front == -1) {
            front = 0; // if the queue is empty, set front to 0
        }
        queueArray[++rear] = value;
    }

    // Remove and return the front element from the queue
    public int dequeue() {
        if (front == -1 || front > rear) {
            System.out.println("Queue underflow");
            return -1; // Return a sentinel value or handle the underflow case appropriately
        }
        return queueArray[front++];
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return (front == -1 || front > rear);
    }

    // Check if the queue is full
    public boolean isFull() {
        return (rear == maxSize - 1);
    }

    // Get the front element of the queue without removing it
    public int peek() {
        if (front == -1 || front > rear) {
            System.out.println("Queue is empty");
            return -1; // Return a sentinel value or handle the empty queue case appropriately
        }
        return queueArray[front];
    }

    // Get the size of the queue
    public int size() {
        return (rear - front + 1);
    }

    // Print the elements of the queue
    public void display() {
        if (front == -1 || front > rear) {
            System.out.println("Queue is empty");
            return;
        }
        System.out.print("Queue: ");
        for (int i = front; i <= rear; i++) {
            System.out.print(queueArray[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Queue queue = new Queue(5);
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.display(); // Queue: 1 2 3

        int dequeuedElement = queue.dequeue();
        System.out.println("Dequeued element: " + dequeuedElement); // Dequeued element: 1

        System.out.println("Front element: " + queue.peek()); // Front element: 2

        System.out.println("Queue size: " + queue.size()); // Queue size: 2

        queue.display(); // Queue: 2 3
    }
}
