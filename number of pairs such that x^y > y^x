import java.util.Arrays;

public class Solution {
    int getIndex(int y[], int n, int ele) {
        int low = 0;
        int high = n - 1;
        int ans = -1;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (y[mid] > ele) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }

    long countPairs(int[] x, int[] y, int m, int n) {
        int zeros = 0, ones = 0, twos = 0, threes = 0, fours = 0;

        Arrays.sort(x);
        Arrays.sort(y);

        for (int i = 0; i < n; i++) {
            if (y[i] == 0)
                zeros++;
            else if (y[i] == 1)
                ones++;
            else if (y[i] == 2)
                twos++;
            else if (y[i] == 3)
                threes++;
            else if (y[i] == 4)
                fours++;
        }

        long ans = 0;

        for (int i = 0; i < m; i++) {
            if (x[i] == 0) {
                continue;
            } else if (x[i] == 1) {
                ans += zeros;
            } else if (x[i] == 2) {
                int index = getIndex(y, n, 2);
                if (index != -1) {
                    ans += n - index;
                }
                ans -= threes + fours;
                ans += ones + zeros;
            } else {
                int index = getIndex(y, n, x[i]);
                if (index != -1) {
                    ans += n - index;
                }
                ans += ones + zeros;
                if (x[i] == 3) {
                    ans += twos;
                }
            }
        }

        return ans;
    }
}
