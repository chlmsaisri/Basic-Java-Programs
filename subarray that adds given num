//Given an unsorted array A of size N containing positive integers,
//find a continuous sub-array that adds to a given number S and return its left and right indexes (1-based indexing).

import java.util.ArrayList;

class Solution {
    public ArrayList<Integer> subarraySum(int[] arr, int N, long S) {
        ArrayList<Integer> result = new ArrayList<>();

        int left = 0;
        int right = 0;
        long sum = 0;

        while (right < N) {
            sum += arr[right];

            while (sum > S) {
                sum -= arr[left];
                left++;
            }

            if (sum == S) {
                result.add(left + 1);
                result.add(right + 1);
                return result;
            }

            right++;
        }

        result.add(-1);
        return result;
    }
}
